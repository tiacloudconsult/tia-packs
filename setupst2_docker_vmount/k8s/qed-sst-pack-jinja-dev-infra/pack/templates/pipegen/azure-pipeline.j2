pool: $(linux_build_agent_pool)

variables:
  - group: {{ project_identifier }}-dev-variable-group
  - template: variables.yaml

parameters:
  {% include 'parameters.j2' %} 

{% if functional_test_tool == 'torchbearer' %} 
resources:
  repositories:  
    - repository: pipegen-torchbearer
      type: githubenterprise
      name: gsk-tech/{{ project_identifier }}-torchbearer
      ref: refs/heads/feature/pipegen3integration
      endpoint: {{ project_identifier }}-github-svc
{% endif %}  

stages:
  {% if tech_stack == 'java' or tech_stack == 'javascript' or tech_stack == 'asp_dotnet_framework' or tech_stack == 'dotnet_core' %}
  # Build Tool
  - stage: Build
    jobs:
    {% if tech_stack == 'java' %}
      {% if stack_build_tool == 'maven' %}
        {% include 'tech_stack/buildtool/java_maven.j2' %}
      {% elif stack_build_tool == 'ant' %}
        {% include 'tech_stack/buildtool/java_ant.j2' %}
      {% endif %}

      {% if publish_test_metrics == 'True' %}
      {% with test_tool=tech_stack+'_'+stack_build_tool, artifacts_name='drop', job_name=tech_stack+'_build' %}
        {% include 'test_metrics.j2' %}
      {% endwith %}
      {% endif %}
    {% elif tech_stack == 'javascript' %}
      {% include 'tech_stack/buildtool/javascript.j2' %}
    {% elif tech_stack == 'asp_dotnet_framework' %}
      {% include 'tech_stack/buildtool/asp_dotnet_framework.j2' %}
    {% elif tech_stack == 'dotnet_core' %}
      {% include 'tech_stack/buildtool/dotnet_core.j2' %}
    {% endif %}
  {% endif %}

  {% if tech_stack == 'python' or tech_stack == 'javascript' or tech_stack == 'asp_dotnet_framework' or tech_stack == 'dotnet_core' %}
  # Unit Test
  - stage: UnitTest
    jobs:
    {% if tech_stack == 'python' %}
      {% if stack_unittest_tool == 'pytest' %}
        {% include 'tech_stack/unittest/python_pytest.j2' %}
      {% elif stack_unittest_tool == 'unittest' %}
        {% include 'tech_stack/unittest/python_unittest.j2' %}
      {% endif %}
    {% elif tech_stack == 'javascript' %}
      {% include 'tech_stack/unittest/javascript.j2' %}
    {% elif tech_stack == 'asp_dotnet_framework' %}
      {% include 'tech_stack/unittest/asp_dotnet_framework.j2' %}
    {% elif tech_stack == 'dotnet_core' %}
      {% include 'tech_stack/unittest/dotnet_core.j2' %}
    {% endif %}

    {% if publish_test_metrics == 'True' %}
    {% with test_tool=tech_stack, artifacts_name='drop', job_name=tech_stack+'_unittest' %}
      {% include 'test_metrics.j2' %}
    {% endwith %}
    {% endif %}
  {% endif %}

  
  {% if blackduck == 'True' %}
  # Composition Analysis
  - stage: CompositionAnalysis
    displayName: 'Composition Analysis'
    jobs:
      - job: Blackduck
        displayName: 'BlackDuck Scan'
        pool: 
          vmImage: ubuntu-latest        
        variables:
            project_name: '{{ blackduck_project }}'
            project_version: '{{ existing_blackduck_project_version }}'
        steps:
          {% if tech_stack == 'javascript' %}
          - bash: npm install
          {% endif %}
          {% if stack == 'python' %}
          - bash: pip install -r requirements.txt 
          {% endif %}
          - template: composition_analysis.yaml
  {% endif %}        

  {% if sonarqube == 'True' %}
  # Static Code Analysis
  - stage: CodeQuality
    displayName: 'Code Quality'
    dependsOn:         # CodeQuality stage must run after Build and UnitTest stages
      {% if tech_stack == 'java' or tech_stack == 'javascript' or tech_stack == 'asp_dotnet_framework' or tech_stack == 'dotnet_core' %}
       - Build
      {% endif %}
      {% if tech_stack == 'python' or tech_stack == 'javascript' or tech_stack == 'asp_dotnet_framework' or tech_stack == 'dotnet_core' %}
       - UnitTest
      {% endif %}
    jobs:
      - template: static_code_analysis.yaml
  {% endif %}

  {% if azure_artifacts == 'True' %}
  # Publish, Build and test artifacts to Azure artifact
  - stage: ArtifactsPublish   
    displayName: 'Publish Artifacts'
    dependsOn: # CodeQuality stage must run after Build, UnitTest and CodeQuality stages
      {% if tech_stack == 'java' or tech_stack == 'javascript' or tech_stack == 'asp_dotnet_framework' or tech_stack == 'dotnet_core' %}       
      - Build  # this stage runs after Build,UnitTest,CodeQuality
      {% endif %}
      {% if tech_stack == 'python' or tech_stack == 'javascript' or tech_stack == 'asp_dotnet_framework' or tech_stack == 'dotnet_core' %}
      - UnitTest
      {% endif %}
      {% if sonarqube == 'True' %}
      - CodeQuality
      {% endif %}
    jobs:
      - job: UniversalPackagesPublish
        displayName: 'Publish Universal Packages'
        steps:
          - template: publish_tag.yaml

          - task: DownloadBuildArtifacts@0                    # Download files that were saved as artifacts of a completed build
            inputs:
               buildType: 'current'
               downloadType: 'single'
               artifactName: 'drop'
               downloadPath: '$(Build.ArtifactStagingDirectory)'
          
          - task: UniversalPackages@0                          # Download or publish Universal Packages
            inputs:
              command: 'publish'
              publishDirectory: '$(Build.ArtifactStagingDirectory)'
              feedsToUsePublish: 'internal'
              vstsFeedPublish: '$(System.TeamProject)/{{ project_identifier }}'
              vstsFeedPackagePublish: '$(_publish_tag)'
              versionOption: 'patch'
              versionPublish: '1.0.0'
              packagePublishDescription: 'Pipeline generated artifacts'
  {% endif %}

  {% if docker_build == 'True' and tech_stack != 'asp_dotnet_framework' %}
  # Docker Build
  - stage: DockerBuild
    displayName: 'Docker Build & Publish'
    dependsOn:         # DockerBuild stage must run after Build and CodeQuality stages
      {% if tech_stack == 'java' or tech_stack == 'javascript' or  tech_stack == 'dotnet_core' %}
      - Build
      {% endif %}
      {% if tech_stack == 'python' or tech_stack == 'javascript' or tech_stack == 'dotnet_core' %}
      - UnitTest
      {% endif %}
      {% if sonarqube == 'True' %}
      - CodeQuality
      {% endif %}
    jobs:
      - job: DockerBuild
        displayName: 'Build & Publish'
        pool:
          vmImage: ubuntu-latest
        steps:
          - template: publish_tag.yaml
          
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(Build.SourcesDirectory)'
         
          - task: Docker@2
            inputs:
              containerRegistry: $(application_acr_service_connection)
              repository: $(application_acr_repository)
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: |
                   $(_publish_tag)-latest
                   $(_publish_tag)-$(Build.BuildId)
              
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'kubernetes'
              ArtifactName: 'manifests'
              publishLocation: 'Container' 
  {% endif %}

  {% if docker_build == 'True' and trivy_image_scan == 'True' and tech_stack != 'asp_dotnet_framework' %}
  # Trivy Docker Container Scan
  - stage: DockerContainerScan
    displayName: 'Docker Container Scan'
    dependsOn:         # CodeQuality stage must run after Build and CodeQuality stages
      - DockerBuild
      {% if tech_stack == 'java' or tech_stack == 'javascript' or tech_stack == 'dotnet_core' %}
      - Build
      {% endif %}
      {% if tech_stack == 'python' or tech_stack == 'javascript' or tech_stack == 'dotnet_core' %}
      - UnitTest
      {% endif %}
      {% if sonarqube == 'True' %}
      - CodeQuality
      {% endif %}
    jobs:
      - job: ContainerScan
        displayName: 'Trivy Scan'
        pool:
          name: $(linux_build_agent_pool)
        steps:
          - template: publish_tag.yaml
          - task: Docker@2
            inputs:
              containerRegistry: $(application_acr_service_connection) # This is the service connection used to connect with ACR
              command: 'login' 
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                trivy image -f json -o $(Build.ArtifactStagingDirectory)/trivy_image_scan_results.json $(application_acr_registry)/$(application_acr_repository):$(_publish_tag)-latest 
            displayName: Trivy Scan
            
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'          
  {% endif %}
          

  {% if deployment_tool != 'none' and tech_stack != 'asp_dotnet_framework' %} 
  # Deployment             
  - stage: Deployment
    displayName: 'Deployment'
    condition: succeeded()
    dependsOn:         # CodeQuality stage must run after Build, DockerBuild, ArtifactsPublish and CodeQuality stages
      {% if tech_stack == 'java' or tech_stack == 'javascript' or tech_stack == 'dotnet_core' %}
      - Build
      {% endif %}
      {% if tech_stack == 'python' or tech_stack == 'javascript' or tech_stack == 'dotnet_core' %}
      - UnitTest
      {% endif %}
      {% if docker_build == 'True' %}
      - DockerBuild
      {% endif %}
      {% if azure_artifacts == 'True' %}
      - ArtifactsPublish
      {% endif %}
      {% if sonarqube == 'True' %}
      - CodeQuality
      {% endif %}
    jobs:
      - template: deployment.yaml
        parameters:
           environment: DEV-{{ project_identifier }}
  {% endif %}

  {% if functional_test_tool != 'none' or performance_test_tool != 'none' or api_test_tool != 'none' or security_test_tool != 'none' %}
  {% raw %} 
  # Testing capability
  - ${{ if eq(parameters.ContinuousTesting, true) }}:
    - template: testing_capability.yaml
  {% endraw %}
  {% endif %}

  {% raw %}
  # MS Teams notification
  - ${{ if eq(parameters.TeamNotify, true) }}:
    - template: teams_notification.yaml
  {% endraw %}

