      - job: {{ performance_test_tool }}
        displayName: 'JMeter'
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: $(framework_acr_service_connection) # This is the service connection used to connect with ACR
              command: 'login'
          
          {% raw %}
          - task: Bash@3
            displayName: Run JMeter tests
            inputs:
              targetType: 'inline'
              failOnStderr: true
              script: |
                  echo JMETER_CLI_OPTS: ${{ variables.performance_test_jmeter_cli_opts }}
                  echo JMETER_TEST_PATH: ${{ variables.performance_test_jmeter_test_path }}
                  echo JMETER_TEST_FILE: ${{ variables.performance_test_jmeter_test_file }}
                  docker pull ${{ variables.framework_acr_registry }}/jmeter:latest
                  if [ ! -f $(system.defaultworkingdirectory)/${{ variables.performance_test_jmeter_test_path }}/${{ variables.performance_test_jmeter_test_file }} ]; then
                    echo '[error] JMETER_TEST_FILE not found' ; exit 1 
                  else
                    mkdir -p /tmp/jmeter-$(Build.BuildId)    #Creating dirctory to run the Jmetre test
                    echo 'Created directory /tmp/jmeter-$(Build.BuildId)'
                    cp -r $(system.defaultworkingdirectory)/${{ variables.performance_test_jmeter_test_path }}/* /tmp/jmeter-$(Build.BuildId)/
                    echo 'Files copied from $(system.defaultworkingdirectory)/${{ variables.performance_test_jmeter_test_path }}/* to /tmp/jmeter-$(Build.BuildId)'
                    docker run --rm -v /tmp/jmeter-$(Build.BuildId):/tmp:rw ${{ variables.framework_acr_registry }}/jmeter:latest -n -t /tmp/${{ variables.performance_test_jmeter_test_file }} -l /tmp/test-plan.jtl -j /tmp/jmeter.log -e -o /tmp/report ${{ variables.performance_test_jmeter_cli_opts }}   #Using DOCKER agent to run the jmeter test
                    echo 'JMeter report executed'
                  fi
                  if [ -f /tmp/jmeter-$(Build.BuildId)/test-plan.jtl ] && [ -f /tmp/jmeter-$(Build.BuildId)/jmeter.log ] && [ -d /tmp/jmeter-$(Build.BuildId)/report ]; then
                    cp -rf /tmp/jmeter-$(Build.BuildId)/test-plan.jtl /tmp/jmeter-$(Build.BuildId)/jmeter.log /tmp/jmeter-$(Build.BuildId)/report $(Build.ArtifactStagingDirectory)
                    echo 'Copied JMeter reports to $(Build.ArtifactStagingDirectory) '
                    rm -rf /tmp/jmeter-$(Build.BuildId)
                  else
                    echo '[error] Failed to copy JMeter reports into $(Build.ArtifactStagingDirectory)'
                    exit 1
                  fi
          {% endraw %} 

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: {{ performance_test_tool }}
              publishLocation: 'Container'
